#!/bin/sh
set -eux

serie="${1}"
kernel="${2}"
script="${3}"
lxd_snap_channel="${4}"
shift 4
_script="$(mktemp)"
test_name="$(basename "${script}")"

# Look in the test script if there is a suggested queue
queue="$(awk '/^# testflinger_queue:/ {print $3}' "${script}")"
queue="${queue:-anything}"

# Look in the test script if there is a suggested url for the image to use
img_url="$(awk '/^# testflinger_img_url:/ {print $3}' "${script}")"

# Look in the test script if there is a suggested boot media
boot_media="$(awk '/^# testflinger_boot_media:/ {print $3}' "${script}")"

testflinger_yaml_job() {
    cat << EOF
job_queue: ${queue}
provision_data:
$(if [ -n "${img_url}" ]; then echo "  url: \"${img_url}\""; else echo "  distro: \"${serie}\""; fi)
$(if [ -n "${boot_media}" ]; then echo "  media: \"${boot_media}\""; fi)
test_data:
  test_cmds: |
    #!/bin/bash
    set -eux
    export SSH_OPTS="-q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=30 -o ServerAliveCountMax=3"
    SCP="scp \$SSH_OPTS"
    SSH="ssh -n \$SSH_OPTS"

    # Get lxd-ci scripts
    git clone --depth 1 https://github.com/canonical/lxd-ci.git
    cd lxd-ci

    # wait for a machine to be ready
    wait_machine() {
        echo "==> Waiting for SSH to respond" >&2
        # shellcheck disable=SC2034
        for i in \$(seq 600); do
            nc -w1 -z "\${DEVICE_IP}" 22 && break
            sleep 1
        done

        # Work around regression in cloud-init delaying SSH access
        # https://bugs.launchpad.net/ubuntu/+source/cloud-init/+bug/2039441
        for _ in \$(seq 30); do
            \$SSH -o ConnectTimeout=1 "ubuntu@\${DEVICE_IP}" true && break
            sleep 1
        done
    }

    # Setup custom kernel
    if [ "${kernel}" != "default" ]; then
        echo "==> Installing custom kernel: ${kernel}" >&2
        ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no "ubuntu@\${DEVICE_IP}" sudo bash /dev/stdin "${kernel}" < "bin/custom-kernel" || true
        sleep 5

        if ! command -v nc > /dev/null; then
          apt-get update
          apt-get install -y netcat-openbsd
        fi
        wait_machine
    fi

    # Copy test script to DUT
    _script="\$(mktemp)"
    sed "1 r bin/helpers" "${script}" | sed "s|@@LXD_SNAP_CHANNEL@@$|LXD_SNAP_CHANNEL=${lxd_snap_channel}|" > "\${_script}"
    \$SCP "\${_script}" "ubuntu@\${DEVICE_IP}:test-script"

    # Run the test
    \$SSH "ubuntu@\${DEVICE_IP}" -- sudo "PURGE_LXD=1" TEST_IMG="${TEST_IMG:-}" bash test-script $@
EOF
}

setup_testflinger() {
    # Test connectivity
    if ! wget --method HEAD -qO /dev/null https://testflinger.canonical.com/agents; then
        echo "Failed to connect to testflinger.canonical.com, make sure you are connected to the VPN" >&2
        exit 1
    fi

    command -v testflinger >/dev/null && return

    echo "Installing testflinger snap" >&2
    snap install testflinger-cli
}

setup_testflinger

# Submit the job
echo "==> Running the job ${test_name} against ${lxd_snap_channel}" >&2
testflinger_yaml_job "$*" | testflinger submit --poll -
