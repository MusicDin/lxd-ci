#!/bin/sh
set -eux

# testflinger_queue: torchtusk

if mokutil --sb-state | grep -Fx "SecureBoot enabled"; then
  echo "SecureBoot needs to be disabled to avoid a prompt to register custom MOK (Machine-Owner Key) during DKMS" >&2
  exit 1
fi

# Install dependencies
install_deps jq ubuntu-drivers-common
RECOMMENDED_DRIVER="$(ubuntu-drivers devices 2>/dev/null | awk '/nvidia-driver-.*recommended$/ {print $3}')"
INSTALL_RECOMMENDS=yes install_deps "${RECOMMENDED_DRIVER}"

# Install LXD
install_lxd

IMAGE="${TEST_IMG:-ubuntu-daily:24.04}"

# Check that NVIDIA is installed
nvidia-smi

# Configure LXD
lxc storage create default zfs
lxc profile device add default root disk path=/ pool=default
lxc network create lxdbr0
lxc profile device add default eth0 nic network=lxdbr0 name=eth0

# Consult available resources
identical_nvidia_gpus="$(lxc query /1.0/resources | jq -r '.gpu.cards | .[] | select(.driver == "nvidia") | .product_id' | sort | uniq --repeated)"
first_card_pci_slot="$(lxc query /1.0/resources | jq -r '.gpu.cards | .[] | select(.driver == "nvidia") | .pci_address' | head -n1)"
first_card_product_id="$(lxc query /1.0/resources | jq -r ".gpu.cards | .[] | select(.pci_address == \"${first_card_pci_slot}\") | .product_id")"

# Setup MIG
nvidia-smi -mig 1
nvidia-smi mig -lgip
nvidia-smi mig -cgi 2g.10gb,1g.5gb,1g.5gb
nvidia-smi mig -lgi
nvidia-smi mig -lcip
nvidia-smi mig -cci 1g.5gb -gi 7
nvidia-smi mig -cci 1g.5gb -gi 13
nvidia-smi mig -cci 1c.2g.10gb,1c.2g.10gb -gi 5
nvidia-smi

UUIDS="$(nvidia-smi -L | sed -n "/(UUID: MIG-/ s/.* \(MIG-[^)]\+\))$/\1/p")"
UUID1="$(echo "$UUIDS" | sed -n '1p')"
UUID2="$(echo "$UUIDS" | sed -n '2p')"
UUID3="$(echo "$UUIDS" | sed -n '3p')"
UUID4="$(echo "$UUIDS" | sed -n '4p')"

# Launch test containers
lxc init "${IMAGE}" nvidia-mig1 -c nvidia.runtime=true
lxc config device add nvidia-mig1 gpu0 gpu gputype=mig mig.uuid="$UUID1" pci="${first_card_pci_slot}"
lxc init "${IMAGE}" nvidia-mig2 -c nvidia.runtime=true
lxc config device add nvidia-mig2 gpu0 gpu gputype=mig mig.uuid="$UUID2" pci="${first_card_pci_slot}"
lxc init "${IMAGE}" nvidia-mig3 -c nvidia.runtime=true
lxc config device add nvidia-mig3 gpu0 gpu gputype=mig mig.uuid="$UUID3" pci="${first_card_pci_slot}"
lxc init "${IMAGE}" nvidia-mig4 -c nvidia.runtime=true
lxc config device add nvidia-mig4 gpu0 gpu gputype=mig mig.uuid="$UUID4" pci="${first_card_pci_slot}"
lxc start nvidia-mig1
lxc exec nvidia-mig1 -- nvidia-smi
lxc start nvidia-mig2
lxc exec nvidia-mig2 -- nvidia-smi
lxc start nvidia-mig3
lxc exec nvidia-mig3 -- nvidia-smi
lxc start nvidia-mig4
lxc exec nvidia-mig4 -- nvidia-smi

lxc stop -f nvidia-mig4
if [ -n "${identical_nvidia_gpus}" ]; then
  # XXX: if there are multiple identical cards the vendorid/productid combo isn't enough to identify the GPU so a
  #      PCI address would be needed as well but that's already been tested before
  echo "Skipping vendorid/productid assignment test due to multiple NVIDIA GPUs with the same productid"
  lxc config device add nvidia-mig4 gpu1 gpu gputype=mig mig.uuid="$UUID1" pci="${first_card_pci_slot}"
  lxc config device add nvidia-mig4 gpu2 gpu gputype=mig mig.uuid="$UUID2" pci="${first_card_pci_slot}"
else
  lxc config device add nvidia-mig4 gpu1 gpu gputype=mig mig.uuid="$UUID1" vendorid=10de productid="${first_card_product_id}"
  lxc config device add nvidia-mig4 gpu2 gpu gputype=mig mig.uuid="$UUID2" vendorid=10de productid="${first_card_product_id}"
fi
lxc start nvidia-mig4
lxc exec nvidia-mig4 -- nvidia-smi

# Make sure all 3 MIG devices are there (gpu{0,1,2})
[ "$(lxc exec nvidia-mig4 -- nvidia-smi -L | grep -cwF MIG)" -eq 3 ]

# Wait for them to start and list
lxc list

# Stop all instances
lxc stop -f --all

# Cleanup MIG
nvidia-smi mig -dci
nvidia-smi mig -dgi
nvidia-smi -mig 0

echo "==> Cleaning up"
lxc delete nvidia-mig1 nvidia-mig2 nvidia-mig3 nvidia-mig4
lxc profile device remove default root
lxc profile device remove default eth0
lxc storage delete default
lxc network delete lxdbr0

# shellcheck disable=SC2034
FAIL=0
