#!/bin/sh
set -eu

TYPE="CONTAINER"
[ "${1:-""}" = "vm" ] && TYPE="VIRTUAL-MACHINE"

waitSnapdSeed() (
  set +x
  for i in $(seq 60); do # Wait up to 60s.
    if systemctl show snapd.seeded.service --value --property SubState | grep -qx exited; then
      return 0 # Success.
    fi

    sleep 1
  done

  echo "snapd not seeded after ${i}s"
  return 1 # Failed.
)

cleanup() {
    echo ""
    if [ "${FAIL}" = "1" ]; then
        echo "Test failed"
        exit 1
    fi

    echo "Test passed"
    exit 0
}

FAIL=1
trap cleanup EXIT HUP INT TERM

# Wait for snapd seeding
waitSnapdSeed

# Configure to use the proxy
curl -s http://canonical-lxd.stgraber.org/config/snapd.sh | sh

# Install LXD
while [ -e /usr/bin/lxd ]; do
    apt-get remove --purge --yes lxd lxd-client lxcfs liblxc1
done
apt-get remove --purge cloud-init --yes
snap remove lxd || true
snap install lxd --channel=latest/edge
apt-get install jq zfsutils-linux -y --no-install-recommends
export PATH="/snap/bin/:${PATH}"
lxd waitready --timeout=300

# Bump sysctls
echo 1048576 > /proc/sys/fs/inotify/max_queued_events
echo 1048576 > /proc/sys/fs/inotify/max_user_instances
echo 1048576 > /proc/sys/fs/inotify/max_user_watches
echo 262144 > /proc/sys/vm/max_map_count
echo 8192 > /proc/sys/net/ipv4/neigh/default/gc_thresh3
echo 8192 > /proc/sys/net/ipv6/neigh/default/gc_thresh3
echo 2000 > /proc/sys/kernel/keys/maxkeys

# Setup network
lxc network create lxdbr0 ipv4.address=10.0.0.1/16 ipv4.nat=true ipv6.address=2001:470:b368:4242::1/64 ipv6.nat=true
lxc network attach-profile lxdbr0 default eth0 eth0

# Setup storage
for backend in zfs btrfs dir; do
    if [ "${backend}" = "dir" ]; then
        lxc storage create default ${backend} >/dev/null 2>&1 && break
    else
        if [ "$(hostname)" = "lantea" ] || [ "$(hostname)" = "argos" ]; then
            zpool create nvme -m none /dev/nvme0n1p3
            lxc storage create default ${backend} source=nvme/lxd >/dev/null 2>&1 && break
        else
            lxc storage create default ${backend} size=30GB >/dev/null 2>&1 && break
        fi
    fi
done

lxc storage show default >/dev/null 2>&1 || exit 1
lxc profile device add default root disk pool=default path=/

# Create the instances
echo "=> Creating the instances"
for i in $(lxc image list images: | grep x86_64 | grep "${TYPE}" | grep "more" | awk '{print $2}'); do
    # Skip images requiring CGroupV1 as the testserver uses CGroupV2
    if [ "${TYPE}" = "CONTAINER" ] && lxc image info "images:${i}" | grep -q "requirements.cgroup: v1"; then
        continue
    fi
    name=$(echo "${i}" | sed -e "s/\//-/g" -e "s/\.//g")
    if [ "${TYPE}" = "VIRTUAL-MACHINE" ]; then
        lxc init "images:${i}" "${name}" --vm -c security.secureboot=false -c limits.cpu=4 -c limits.memory=4GB

        # Cloud-init testing
        if echo "${name}" | grep -E -q "cloud$"; then
            lxc config set "${name}" user.user-data "$(cat << EOF
#cloud-config
write_files:
  - content: "foo\n"
    path: /user-data
EOF
)"

            lxc config set "${name}" user.vendor-data "$(cat << EOF
#cloud-config
bootcmd:
  - "echo bar > /vendor-data"
EOF
)"
        fi
    else
        lxc init "images:${i}" "${name}-unpriv"
        lxc init "images:${i}" "${name}-priv" -c security.privileged=true

        if [ "${name}" = "voidlinux" ] || [ "${name}" = "voidlinux-musl" ]; then
            # Workaround weird init system
            lxc config set "${name}-unpriv" raw.lxc lxc.signal.halt=SIGCONT
            lxc config set "${name}-priv" raw.lxc lxc.signal.halt=SIGCONT
        fi

        # Cloud-init testing
        if echo "${name}" | grep -E -q "cloud$"; then
            lxc config set "${name}-unpriv" user.user-data "$(cat << EOF
#cloud-config
write_files:
  - content: "foo\n"
    path: /user-data
EOF
)"

            lxc config set "${name}-unpriv" user.vendor-data "$(cat << EOF
#cloud-config
bootcmd:
  - "echo bar > /vendor-data"
EOF
)"

            lxc config set "${name}-priv" user.user-data "$(cat << EOF
#cloud-config
write_files:
  - content: "foo\n"
    path: /user-data
EOF
)"

            lxc config set "${name}-priv" user.vendor-data "$(cat << EOF
#cloud-config
bootcmd:
  - "echo bar > /vendor-data"
EOF
)"
        fi
    fi
done

# Start them all
echo "=> Starting the instances"
COUNT=0
for url in $(lxc query "/1.0/instances" | jq -r .[]); do
    name=$(echo "${url}" | cut -d/ -f4)
    lxc start "${name}"

    COUNT=$((COUNT+1))
    if [ "${COUNT}" = "3" ]; then
        COUNT=0
        sleep 10
    fi
done

# Wait for things to settle
lxc list
sleep 1m

# Check that all instances have an IPv4 and IPv6 address
echo "=> Performing tests"
FAIL=0
for url in $(lxc query "/1.0/instances" | jq -r .[]); do
    name=$(echo "${url}" | cut -d/ -f4)
    echo ""

    # Skip busybox as it wouldn't pass any test
    if echo "${name}" | grep -q '^busybox'; then
        echo "SKIP: Busybox is untestable"
        continue
    fi

    # FIXME: Skip CentOS 7 VMs due to racy agent
    if [ "${TYPE}" = "VIRTUAL-MACHINE" ] && echo "${name}" | grep -q "^centos-7"; then
        echo "SKIP: CentOS 7 has an unstable agent: ${name}"
        continue
    fi

    # Systemd cleanliness
    if lxc exec "${name}" -- sh -c "type systemctl" >/dev/null 2>&1; then
        if lxc exec "${name}" -- systemctl --failed 2>&1 | grep -q '\sfailed\s'; then
            echo "FAIL: systemd clean: ${name}"
            # Show the systemd failures
            echo "DEBUG: systemd failed: ${name}"
            lxc exec "${name}" -- systemctl --failed
            FAIL=1
        else
            echo "PASS: systemd clean: ${name}"
        fi
    else
        echo "SKIP: systemd clean: ${name}"
    fi

    # Get the addresses
    address=$(lxc query "${url}/state" | jq -r ".network.eth0.addresses | .[] | select(.scope | contains(\"global\")) | .address" 2>/dev/null || true)
    if [ -z "${address}" ]; then
        address=$(lxc query "${url}/state" | jq -r ".network.enp5s0.addresses | .[] | select(.scope | contains(\"global\")) | .address" 2>/dev/null || true)
    fi

    if [ -z "${address}" ]; then
        echo "FAIL: No network interface: ${name}"
        # Show the network state
        echo "DEBUG: network state: ${name}"
        lxc info "${name}"
        FAIL=1
        continue
    fi

    # IPv4 address
    if echo "${address}" | grep "\." -q; then
        echo "PASS: IPv4 address: ${name}"
    else
        echo "FAIL: IPv4 address: ${name}"
        FAIL=1
    fi

    # IPv6 address
    if echo "${address}" | grep ":" -q; then
        echo "PASS: IPv6 address: ${name}"
    else
        echo "FAIL: IPv6 address: ${name}"
        FAIL=1
    fi

    # DNS resolution
    DNS=0
    for i in $(seq 3); do
        if lxc exec "${name}" -- getent hosts canonical.com >/dev/null 2>&1; then
            DNS=1
            break
        fi

        if lxc exec "${name}" -- ping -c1 -W1 canonical.com >/dev/null 2>&1; then
            DNS=1
            break
        fi

        sleep 1
    done
    if [ "${DNS}" = "1" ]; then
        echo "PASS: DNS resolution: ${name}"
    else
        echo "FAIL: DNS resolution: ${name}"
        FAIL=1
    fi

    # Cloud-init testing
    if echo "${name}" | grep -E -q "\-cloud"; then
        if [ "$(lxc file pull "${name}/user-data" - 2>/dev/null)" = "foo" ]; then
            echo "PASS: cloud-init user-data provisioning: ${name}"
        else
            echo "FAIL: cloud-init user-data provisioning: ${name}"
            FAIL=1
        fi

        if [ "$(lxc file pull "${name}/vendor-data" - 2>/dev/null)" = "bar" ]; then
            echo "PASS: cloud-init vendor-data provisioning: ${name}"
        elif echo "${name}" | grep -E -q "^(debian-8|centos-6|oracle-6)-"; then
            echo "SKIP: cloud-init vendor-data provisioning: ${name}"
        else
            echo "FAIL: cloud-init vendor-data provisioning: ${name}"
            FAIL=1
        fi
    fi
done

# Check that all instances can be stopped
echo "=> Performing shutdown test"
STOPPED=0
for i in $(seq 10); do
    if lxc stop --all --timeout=30 >/dev/null 2>&1; then
        STOPPED=1
        break
    else
        echo "$(lxc list | grep -c RUNNING) instances still running"
    fi
done

lxc list

[ "${STOPPED}" = "0" ] && FAIL=1
