name: Build AmazonLinux Images

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      publish:
        type: boolean
        default: false
        description: Publish built image

jobs:
  amazonlinux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        release:
          - 2
          - 2023
        variant:
          - default
        architecture:
          - amd64
          # - arm64
    env:
      type: ""
      distro: "${{ github.job }}"
      target: "${HOME}/build"

    steps:
      - uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/image-setup
        with:
          deploy-key: ${{ secrets.GH_KEY }}

      - name: Build image
        run: |
          TIMEOUT=1800
          YAML="${{ github.workspace }}/images/${{ env.distro }}.yaml"
          ARCH="${{ matrix.architecture }}"
          TYPE="${{ env.type }}"
          RELEASE="${{ matrix.release }}"

          IMAGE_ARCH="${ARCH}"
          [ "${ARCH}" = "amd64" ] && IMAGE_ARCH="x86_64"
          [ "${ARCH}" = "arm64" ] && IMAGE_ARCH="aarch64"

          if [ ${RELEASE} = "2" ]; then
              URL="https://cdn.amazonlinux.com/os-images"
              REL=$(curl -sI https://cdn.amazonlinux.com/os-images/latest/ | sed -En 's/location:.*os-images\/([^\/]+)\/.*/\1/p')

              if [ "${ARCH}" = "amd64" ]; then
                  URL="${URL}/${REL}/container/amzn2-container-raw-${REL}-x86_64.tar.xz"
              elif [ "${ARCH}" = "arm64" ]; then
                  URL="${URL}/${REL}/container-arm64/amzn2-container-raw-${REL}-arm64.tar.xz"
              fi
          fi

          if [ ${RELEASE} = "2023" ]; then
              URL="https://cdn.amazonlinux.com/al2023/os-images"
              REL="2023.2.20231113.0"

              if [ "${ARCH}" = "amd64" ]; then
                  URL="${URL}/${REL}/container/al2023-container-${REL}-x86_64.tar.xz"
              elif [ "${ARCH}" = "arm64" ]; then
                  URL="${URL}/${REL}/container-arm64/al2023-container-${REL}-arm64.tar.xz"
              fi
          fi

          ./bin/build-distro "${YAML}" "${ARCH}" "${TYPE}" "${TIMEOUT}" "${{ env.target }}" \
              -o image.architecture="${IMAGE_ARCH}" \
              -o image.release=${{ matrix.release }} \
              -o image.variant=${{ matrix.variant }} \
              -o source.url="${URL}"

      - name: Print build artifacts
        run: ls -lah "${{ env.target }}"

      - name: Test container image
        uses: ./.github/actions/image-test
        if: contains(env.type, 'container')
        with:
          type: container
          target: ${{ env.target }}
          distro: ${{ env.distro }}
          release: ${{ matrix.release }}
          variant: ${{ matrix.variant }}

      - name: Test VM image
        uses: ./.github/actions/image-test
        if: contains(env.type, 'vm')
        with:
          type: vm
          target: ${{ env.target }}
          distro: ${{ env.distro }}
          release: ${{ matrix.release }}
          variant: ${{ matrix.variant }}

      - name: Upload image
        uses: ./.github/actions/image-upload
        if: inputs.publish == true
        with:
          name: "${{ env.distro }}-${{ matrix.release }}-${{ matrix.architecture }}-${{ matrix.variant }}"
          target: ${{ env.target }}

      # - name: Tmate debugging session (gh-hosted)
      #   if: failure()
      #   uses: mxschmitt/action-tmate@v3
      #   timeout-minutes: 15
